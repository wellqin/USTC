# -*- coding: utf-8 -*-
"""
-------------------------------------------------
File Name:        2.I）Multiplexing
Description :   
Author :          wellqin
date:             2020/4/18
Change Activity:  2020/4/18
-------------------------------------------------
二. C10K问题和io多路复用(select、poll、epoll)

1.C10K问题：
c10k问题,指的是服务器同时支持成千上万个客户端的问题,也就是concurrent 10000 connection(这也是c10k这个名字的由来)。
由于硬件成本的大幅度降低和硬件技术的进步，如果一台服务器同时能够服务更多的客户端，那么也就意味着服务每一个客户端的成本大幅度降低，
从这个角度来看，问题显得非常有意义。

2.五种I/O模型:
    【1】阻塞式I/O：系统调用不会立即返回结果，当前线程会阻塞，等到获得结果或报错时在返回
       （问题：如在调用send()的同时，线程将被阻塞，在此期间，线程将无法执行任何运算或响应任何的网络请求。）

    【2】非阻塞式I/O：调用后立即返回结果（问题：不一定三次握手成功，recv() 会被循环调用，循环调用recv()将大幅度推高CPU 占用率），
        如果不需要recv()结果的，比如做计算任务或者再次发起其他连接就较有优势

    【3】I/O复用：它的基本原理就是select/poll/epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。
        （阻塞式的方法，可以监听多个socket状态）（问题：将数据从内核复制到用户空间的时间不能省）
        - select
            思路：有连接请求抵达了再检查处理。
            问题：句柄上限1024+重复初始化+逐个排查所有文件句柄状态效率不高。
        - poll
            思路：设计新的数据结构提供使用效率。
            问题：逐个排查所有文件句柄状态效率不高。
        - epoll（nginx使用的是epoll）
            思路：只返回状态变化的文件句柄。
            问题：依赖特定平台（Linux）。
            注：epoll不一定比select好（在高并发的情况下，连接活跃度不是很高（可能随时关闭），epoll比select好；在并发性不高，
               同时连接很活跃select比epoll好（游戏））
        他们都是读写过程阻塞的，本质上都是同步IO

    【4】信号驱动式I/O：运用较少

    【5】异步I/O：它就像是用户进程将整个IO操作交给了他人（kernel）完成，然后他人做完后发信号通知。
        在此期间，用户进程不需要去检查IO操作的状态，也不需要主动的去拷贝数据。
"""


