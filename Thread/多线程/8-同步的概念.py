# -*- coding: utf-8 -*-
"""
-------------------------------------------------
File Name:        8-同步的概念
Description :   
Author :          wellqin
date:             2019/9/11
Change Activity:  2019/9/11
-------------------------------------------------
"""

# 1. 多线程开发可能遇到的问题

"""
假设两个线程t1和t2都要对num=0进⾏增1运算，t1和t2都各对num修改10次，num的最终的结果应该为20。

但是由于是多线程访问，有可能出现下⾯情况：
在num=0时，t1取得num=0。此时系统把t1调度为”sleeping”状态，把t2转换
为”running”状态，t2也获得num=0。然后t2对得到的值进⾏加1并赋给num，
使得num=1。然后系统⼜把t2调度为”sleeping”，把t1转为”running”。线程t1
⼜把它之前得到的0加1后赋值给num。这样，明明t1和t2都完成了1次加1⼯
作，但结果仍然是num=1。
"""

from threading import Thread
import time

g_num = 0



def test1():
    global g_num
    for i in range(1000000):
        g_num += 1
    print("---test1---g_num=%d" % g_num)


def test2():
    global g_num
    for i in range(1000000):
        g_num += 1
    print("---test2---g_num=%d" % g_num)


p1 = Thread(target=test1)
p1.start()
# time.sleep(3)  # 取消屏蔽之后 再次运⾏程序，结果会不⼀样，，，为啥呢？
p2 = Thread(target=test2)
p2.start()
print("---g_num=%d---" % g_num)


"""
运⾏结果(可能不⼀样，但是结果往往不是2000000)：
---g_num=284672---
---test1---g_num=1166544
---test2---g_num=1406832

取消屏蔽之后，再次运⾏结果如下：
---test1---g_num=1000000
---g_num=1041802---
---test2---g_num=2000000

问题产⽣的原因就是没有控制多个线程对同⼀资源的访问，对数据造成破
坏，使得线程运⾏的结果不可预期。这种现象称为“线程不安全”。
"""


# 2. 什么是同步
"""
同步就是协同步调，按预定的先后次序进⾏运⾏。如:你说完，我再说。
"同"字从字⾯上容易理解为⼀起动作其实不是，"同"字应是指协同、协助、互相配合。
如进程、线程同步，可理解为进程或线程A和B⼀块配合，A执⾏到⼀定程度
时要依靠B的某个结果，于是停下来，示意B运⾏;B依⾔执⾏，再将结果给
A;A再继续操作。
"""

# 3. 解决问题的思路

"""
对于本⼩节提出的那个计算错误的问题，可以通过 线程同步  来进⾏解决思路，如下:

1. 系统调⽤t1，然后获取到num的值为0，此时上⼀把锁，即不允许其他现在操作num
2. 对num的值进⾏+1
3. 解锁，此时num的值为1，其他的线程就可以使⽤num了，⽽且是num的值不是0⽽是1
4. 同理其他线程在对num进⾏修改时，都要先上锁，处理完后再解锁，在上锁的整个过程中不允许其他线程访问，就保证了数据的正确性
"""
# 见下一章互斥锁
