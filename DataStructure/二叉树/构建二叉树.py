# -*- coding: utf-8 -*-
"""
-------------------------------------------------
File Name:        ÊûÑÂª∫‰∫åÂèâÊ†ë
Description :   
Author :          wellqin
date:             2019/8/1
Change Activity:  2019/8/1
-------------------------------------------------
"""


class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


"""
‰∏ÄÂè•ËØùÔºåÁúãÂà∞Ê†ëüå≤Â∞±Ë¶ÅÊÉ≥Âà∞ÈÄíÂΩí

preorder ÊòØ Ê†π -> Â∑¶ -> Âè≥
inorder ÊòØ Â∑¶ -> Ê†π -> Âè≥
È¶ñÂÖàpreÁöÑÁ¨¨‰∏Ä‰∏™Â∞±ÊòØÊï¥‰∏™Ê†ëÁöÑroot, ÂÅáËÆæ preorder[0] = inorder[k],ÈÇ£‰πàinorderÁöÑÂâçk-1‰∏™Â∞±ÊòØÊ†ëÁöÑÂ∑¶Â≠êÊ†ëÔºåÂêéÈù¢ÈÉ®ÂàÜÂ∞±ÊòØÊ†ëÁöÑÂè≥Â≠êÊ†ë
"""


class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        if not preorder or len(preorder) == 0:
            return None

        root = TreeNode(preorder[0])
        k = inorder.index(preorder[0])

        root.left = self.buildTree(preorder[1:k + 1], inorder[0:k])
        root.right = self.buildTree(preorder[k + 1:], inorder[k + 1:])
        return root


"""
inorder ÊòØ Â∑¶ -> Ê†π -> Âè≥
postorderÊòØ Ê†π -> Â∑¶ ->  Âè≥
"""


class Solution1(object):
    def buildTree(self, inorder, postorder):
        """
        :type inorder: List[int]
        :type postorder: List[int]
        :rtype: TreeNode
        """
        if not inorder or len(inorder) == 0:
            return None

        root = TreeNode(postorder[-1])
        k = inorder.index(postorder[-1])

        root.left = self.buildTree(inorder[:k], postorder[:k])
        root.right = self.buildTree(inorder[k + 1:], postorder[k:-1])
        return root